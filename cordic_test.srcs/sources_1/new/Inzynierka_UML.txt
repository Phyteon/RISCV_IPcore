@startuml
hide empty members
skinparam groupInheritance 2

abstract class Architecture {
  + const int InstructionBitWidth
  + const int RegisterBitWidth
}

abstract class Instruction {
  # InstructionFormat format
  # InstructionSet set
  # logic [InstructionBitWidth - 1 : 0] contents
  + logic [InstructionBitWidth - 1 : 0] GetWholeContents()
  + InstructionFormat GetFormat()
  + InstructionSet GetInstrSet()
}

class RTypeInstruction {
  - const OPCODE_field opcode
  - const RD_field rd
  - const FUNCT3_field funct3
  - const RS1_field rs1
  - const RS2_field rs2
  - const FUNCT7_field funct7
  
  + RTypeInstruction([fields])
  + logic[opcode.BitWidth - 1 : opcode.BeginIdx] GetOpcodeField()
  ..Analogical Getters..
}

class ITypeInstruction {
  - const OPCODE_field opcode
  - const RD_field rd
  - const FUNCT3_field funct3
  - const RS1_field rs1
  - const IMM_field imm

  + ITypeInstruction([fields])
  + logic[opcode.BitWidth - 1 : opcode.BeginIdx] GetOpcodeField()
  ..Analogical Getters..
}

class STypeInstruction {
  - const OPCODE_field opcode
  - const IMM_field imm1
  - const FUNCT3_field funct3
  - const RS1_field rs1
  - const RS2_field rs2
  - const IMM_field imm2

  + STypeInstruction([fields])
  + logic[opcode.BitWidth - 1 : opcode.BeginIdx] GetOpcodeField()
  ..Analogical Getters..
}

class UTypeInstruction {
  - const OPCODE_field opcode
  - const RD_field rd
  - const IMM_field imm

  + UTypeInstruction([field])
  + logic[opcode.BitWidth - 1 : opcode.BeginIdx] GetOpcodeField()
  ..Analogical Getters..
}

abstract class InstructionField {
  + int BitWidth
  + int BeginIdx
  + string Property
}

class RD_field {

}

class OPCODE_field {

}

class FUNCT3_field {

}

class RS1_field {

}

class RS2_field {

}

class FUNCT7_field {

}

class IMM_field {

}

class Register {
  - logic[RegisterBitWidth-1 : 0] contents
  + Register(logic[RegisterBitWidth-1 : 0] _contents)
  + logic[RegisterBitWidth-1 : 0] Read()
  + logic Write(logic[RegisterBitWidth-1 : 0] _toWrite)
}

class ALU {
  - Register localReg1
  - Register localReg2
  - Register result
  + logic PerformOperation(Register _reg1, Register _reg2, ALUOperation _oper)
}

class RegisterBank {
  - Register registers[]
  + RegisterBank(int _numOfRegs)
}

class InstructionMemory {
  - Instruction instructions[]
  
}

note left of ALU::PerformOperation
	Return type still to
	be chosen
end note

class List {
  - GlobalListType list[]
  + GlobalListType Get()
  + logic Add(GlobalListType _element)
  + logic Delete(int _idx)
  + logic Set(GlobalListType _element, int _idx)
  + int Length()
}

note right of List::list
	GlobalListType is a
	user defined macro
	designating chosen
	list type (not ideal,
	but has to suffice)
end note

enum InstructionFormat {
  Rtype
  Itype
  Stype
  Btype
  Utype
  Jtype
}

enum ALUOperation {
  ADD
  SUB
  NEG
  NOR
  OR
  XOR
}

enum InstructionSet {
  RV32I
  RV32E
}

Architecture <|-- Instruction
Instruction <|-left- RTypeInstruction
Instruction <|-left- ITypeInstruction
Instruction <|-- STypeInstruction
Instruction <|-- UTypeInstruction

note top of InstructionField
  Its children are used by
  children of <color:royalBlue>Instruction</color>
  class
end note

InstructionField <|-- RD_field
InstructionField <|-- OPCODE_field
InstructionField <|-- FUNCT3_field
InstructionField <|-- RS1_field
InstructionField <|-- RS2_field
InstructionField <|-- FUNCT7_field
InstructionField <|-- IMM_field

Instruction <.. InstructionFormat : used by
Instruction <.. InstructionSet : used by
@enduml