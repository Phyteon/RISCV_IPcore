@startuml
hide empty members
skinparam groupInheritance 2

abstract class Architecture {
  
}

abstract class Instruction {
  + InstructionFormat Format
  + InstructionSet Set
  + ivector Contents
  + InstructionField Fields []
}

class RTypeInstruction {
  + new(ivector _contents)
  ..Specific constructor..
}

class ITypeInstruction {
  + new(ivector _contents)
  ..Specific constructor..
}

class BTypeInstruction {
  + new(ivector _contents)
  ..Specific constructor..
}

class JTypeInstruction {
  + new(ivector _contents)
  ..Specific constructor..
}

class STypeInstruction {
  + new(ivector _contents)
  ..Specific constructor..
}

class UTypeInstruction {
  + new(ivector _contents)
  ..Specific constructor..
}

abstract class InstructionField {
  ..Fields are passed as parameters..
  + int BitWidth
  + int BeginIdx
  + string Info
}

class RD_field {
..Fields are passed as parameters..
}

class OPCODE_field {
..Fields are passed as parameters..
}

class FUNCT3_field {
..Fields are passed as parameters..
}

class RS1_field {
..Fields are passed as parameters..
}

class RS2_field {
..Fields are passed as parameters..
}

class FUNCT7_field {
..Fields are passed as parameters..
}

class IMM_field {
..Fields are passed as parameters..
}

class Register {
  # rvector contents
  + new(rvector _contents)
  + rvector Read()
  + void Write(rvector writeval)
}

class ALU {
  + rvtype branchctrl
  + aluvector PerformOperation(...)
}

class RegistryFile {
  - Register registers[32]
  ..Constructor initialises all regs..
  + rvector_dynamic_array ReadPair(uint rs1, uint rs2)
  + void Write(rvector val, uint rd)
}

class ControlUnit {
  + virtual ControlUnitInterface cuinf
  - dict_uintKey_uintlistVal opcode_mapping[uint]
  - insformat indexer
  + void ControlUnitMainFunction(ivector instruction_raw)
  - Instruction DecodeType(ivector instruction_raw)
  - void DecodeRtype(Instruction rtypeins)
  - void DecodeItype(Instruction itypeins)
  - void DecodeStype(Instruction stypeins)
  - void DecodeBtype(Instruction btypeins)
  - void DecodeUtype(Instruction utypeins)
  - void DecodeJtype(Instruction jtypeins) 
}

class Memory {
  # MemoryType main_memory
  + (task) LoadData(string memfilepath)
  + memorycell Read(uint address, uint bytes, rvtype extend_sign)
  + void Write(address, memorycell data, bytes)
}

abstract class SignExtender {
  + static rvector ExtendSign(rvector imm, uint bitwidth, uint position)
  + static rvector ZeroStuff(rvector imm, uint position)
  + static rvector ConcatentateSTypeImmediate(Instruction stypeins)
  + static rvector ConcatentateBTypeImmediate(Instruction btypeins)
  + static rvector ConcatentateJTypeImmediate(Instruction jtypeins)
}

/'
Architecture <|-- Instruction
Architecture <|-up- Memory
Architecture <|-right- SignExtender
Architecture <|-left- ControlUnit
Architecture <|-- RegistryFile
Architecture <|-- Register
Architecture <|-- ALU
'/
Instruction <|-left- RTypeInstruction
Instruction <|-right- ITypeInstruction
Instruction <|-up- STypeInstruction
Instruction <|-- UTypeInstruction
Instruction <|-- BTypeInstruction
Instruction <|-- JTypeInstruction



/'
InstructionField <|-left- RD_field
InstructionField <|-down- OPCODE_field
InstructionField <|-down- FUNCT3_field
InstructionField <|-down- RS1_field
InstructionField <|-down- RS2_field
InstructionField <|-right- FUNCT7_field
InstructionField <|-up- IMM_field
'/


@enduml